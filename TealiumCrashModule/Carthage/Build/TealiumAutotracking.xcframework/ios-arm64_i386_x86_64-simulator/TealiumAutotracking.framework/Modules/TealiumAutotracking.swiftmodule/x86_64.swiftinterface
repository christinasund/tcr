// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TealiumAutotracking
import Foundation
import Swift
import TealiumCore
import UIKit
extension Tealium {
  public var autotracking: TealiumAutotracking.TealiumAutotrackingManager? {
    get
  }
}
@_hasMissingDesignatedInitializers public class TealiumAutotrackingManager {
  public class func addCustom(data: [Swift.String : Any], toObject: ObjectiveC.NSObject)
  public class func customData(forObject: ObjectiveC.NSObject) -> [Swift.String : Any]?
  public class func removeCustomData(fromObject: ObjectiveC.NSObject)
  public func addCustom(data: [Swift.String : Any], toObject: ObjectiveC.NSObject)
  public func customData(forObject: ObjectiveC.NSObject) -> [Swift.String : Any]?
  public func removeCustomData(fromObject: ObjectiveC.NSObject)
  @objc deinit
}
public class AutotrackingModule : TealiumCore.Collector {
  final public let id: Swift.String
  public var data: [Swift.String : Any]?
  public var config: TealiumCore.TealiumConfig
  required public init(context: TealiumCore.TealiumContext, delegate: TealiumCore.ModuleDelegate?, diskStorage: TealiumCore.TealiumDiskStorageProtocol?, completion: ((Swift.Result<Swift.Bool, Swift.Error>, [Swift.String : Any]?)) -> Swift.Void)
  @objc deinit
}
extension Collectors {
  public static let AutoTracking: TealiumAutotracking.AutotrackingModule.Type
}
